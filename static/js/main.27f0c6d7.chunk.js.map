{"version":3,"sources":["reduxs/constants/actionConstants.js","reduxs/reducers/reducerAvailablePost.js","reduxs/reducers/reducerArchivedPost.js","reduxs/reducers/reducerRoot.js","reduxs/actions/actionsAddingPost.js","reduxs/actions/actionHandlingFetchError.js","reduxs/sagas/sagaFetchPost.js","reduxs/sagas/sagaRoot.js","reduxs/store/store.js","reduxs/selectors/selectorViewPost.js","components/Button.js","components/Articlepost.js","reduxs/actions/actionArchivingPost.js","components/Articlelist.js","components/Searcbar.js","index.js","components/App.js"],"names":["FETCH_API","ADD_POST","ARCHIVE_POST","FETCH_API_ERROR","INITIAL_STATE","posts","error","reduceAddStory","state","action","post","reduceHandleError","archivedPost","id","rootReducer","combineReducers","availablePost","type","archivePost","addingPost","handlingError","handleFetched","fetchedAPI","query","fetch","then","res","json","call","result","put","hits","watchAll","all","takeEvery","logger","createLogger","saga","createSagaMiddleWare","store","createStore","undefined","applyMiddleware","run","rootSaga","selectArchive","archiveID","filter","indexOf","objectID","Button","onClick","className","inline","ButtonInline","defaultProps","connect","dispatch","onArchive","archivingPost","columns","title","url","author","num_comments","points","style","width","href","comments","archive","COLUMNS","label","ArticleHeader","Object","keys","map","key","Articlelist","length","article","Searchbar","props","onSubmit","e","onFetchAPI","setState","preventDefault","onChange","value","target","this","React","Component","fetchingPost","ReactDOM","render","Searcbar","document","getElementById"],"mappings":"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","file":"static/js/main.27f0c6d7.chunk.js","sourcesContent":["export const FETCH_API = 'FETCH_API';\nexport const ADD_POST = 'ADD_POST';\nexport const ARCHIVE_POST = 'ARCHIVE_POST';\nexport const FETCH_API_ERROR = 'FETCH_API_ERROR';\n","import { ADD_POST, FETCH_API_ERROR } from '../constants/actionConstants';\n\nconst INITIAL_STATE = {\n  posts: [],\n  error: null,\n};\n\nconst reduceAddStory = (state, action) => ({\n  posts: action.post,\n  error: null,\n});\n\nconst reduceHandleError = (state, action) => ({\n  posts: [],\n  error: action.error,\n});\n\nexport default function availablePostReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case ADD_POST: {\n      return reduceAddStory(state, action);\n    }\n    case FETCH_API_ERROR: {\n      return reduceHandleError(state, action);\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import { ARCHIVE_POST } from '../constants/actionConstants';\n\nconst INITIAL_STATE = [];\n\nconst archivedPost = (state, action) => [...state, action.id];\n\nexport default function archivePostReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case ARCHIVE_POST: {\n      return archivedPost(state, action);\n    }\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport availablePostReducer from './reducerAvailablePost';\nimport archivePostReducer from './reducerArchivedPost';\n\nconst rootReducer = combineReducers({\n  availablePost: availablePostReducer,\n  archivePost: archivePostReducer,\n});\n\nexport default rootReducer;\n","import { FETCH_API, ADD_POST } from '../constants/actionConstants';\n\nexport const addingPost = post => ({\n  type: ADD_POST,\n  post,\n});\n\nexport const fetchingPost = query => ({\n  type: FETCH_API,\n  query,\n});\n","import { FETCH_API_ERROR } from '../constants/actionConstants';\n\nconst handlingError = error => ({\n  type: FETCH_API_ERROR,\n  error,\n});\n\nexport default handlingError;\n","import { call, put } from 'redux-saga/effects';\nimport { addingPost } from '../actions/actionsAddingPost';\nimport handlingError from '../actions/actionHandlingFetchError';\n\nconst HN_API = `http://hn.algolia.com/api/v1/search?query=`;\nconst fetchedAPI = query => fetch(HN_API + query).then(res => res.json());\n\nexport default function* handleFetched(action) {\n  const { query } = action;\n  try {\n    const result = yield call(fetchedAPI, query);\n    yield put(addingPost(result.hits));\n  } catch (error) {\n    yield put(handlingError(error));\n  }\n}\n","import { takeEvery, all } from 'redux-saga/effects';\nimport { FETCH_API } from '../constants/actionConstants';\nimport handleFetched from './sagaFetchPost';\n\nexport default function* watchAll() {\n  yield all([takeEvery(FETCH_API, handleFetched)]);\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport createSagaMiddleWare from 'redux-saga';\nimport rootReducer from '../reducers/reducerRoot';\nimport rootSaga from '../sagas/sagaRoot';\n\nconst logger = createLogger();\nconst saga = createSagaMiddleWare();\n\nconst store = createStore(rootReducer, undefined, applyMiddleware(logger, saga));\nsaga.run(rootSaga);\nexport default store;\n","const notArchived = archiveID => post => archiveID.indexOf(post.objectID) === -1;\n\nexport const selectArchive = ({ availablePost, archivePost }) =>\n  availablePost.posts.filter(notArchived(archivePost));\n\nexport const selectError = ({ availablePost }) => availablePost.error;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport function Button({ type = 'button', onClick, className, inline }) {\n  return (\n    // eslint-disable-next-line react/button-has-type\n    <button type={type} onClick={onClick} className={className}>\n      {inline}\n    </button>\n  );\n}\n\nexport function ButtonInline({ type = 'button', onClick, inline }) {\n  return <Button type={type} onClick={onClick} className=\"button-inline\" inline={inline} />;\n}\n\nButton.defaultProps = {\n  onClick: undefined,\n  className: '',\n  inline: '',\n};\n\nButton.propTypes = {\n  type: PropTypes.string.isRequired,\n  onClick: PropTypes.func,\n  className: PropTypes.string,\n  inline: PropTypes.string,\n};\n\nButtonInline.defaultProps = {\n  onClick: undefined,\n  inline: '',\n};\n\nButtonInline.propTypes = {\n  type: PropTypes.string.isRequired,\n  onClick: PropTypes.func,\n  inline: PropTypes.string,\n};\n","/* eslint-disable camelcase */\n/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { ButtonInline } from './Button';\nimport { archivingPost } from '../reduxs/actions/actionArchivingPost';\nimport './Articlepost.css';\n\nfunction Articlepost({ post, columns, onArchive }) {\n  const { title, url, author, num_comments, points, objectID } = post;\n  return (\n    <div className=\"story\">\n      <span style={{ width: columns.title.width }}>\n        <a href={url}>{title}</a>\n      </span>\n      <span style={{ width: columns.author.width }}>{author}</span>\n      <span style={{ width: columns.comments.width }}>{num_comments}</span>\n      <span style={{ width: columns.points.width }}>{points}</span>\n      <span style={{ width: columns.archive.width }}>\n        <ButtonInline type=\"button\" inline=\"Archive\" onClick={() => onArchive(objectID)} />\n      </span>\n    </div>\n  );\n}\n\nconst mapDispatchToProps = dispatch => ({\n  onArchive: id => dispatch(archivingPost(id)),\n});\n\nexport default connect(null, mapDispatchToProps)(Articlepost);\n","import { ARCHIVE_POST } from '../constants/actionConstants';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const archivingPost = id => ({\n  type: ARCHIVE_POST,\n  id,\n});\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { selectArchive, selectError } from '../reduxs/selectors/selectorViewPost';\nimport Articlepost from './Articlepost';\nimport './Articlelist.css';\n\nconst COLUMNS = {\n  title: {\n    label: 'Title',\n    width: '40%',\n  },\n  author: {\n    label: 'Author',\n    width: '30%',\n  },\n  comments: {\n    label: 'Comments',\n    width: '10%',\n  },\n  points: {\n    label: 'Points',\n    width: '10%',\n  },\n  archive: {\n    width: '10%',\n  },\n};\n\nconst ArticleHeader = ({ columns }) => (\n  <div className=\"stories-header\">\n    {Object.keys(columns).map(key => (\n      <span key={key} style={{ width: columns[key].width }}>\n        {columns[key].label}\n      </span>\n    ))}\n  </div>\n);\n\nconst mapStateToProps = state => ({\n  posts: selectArchive(state),\n  error: selectError(state),\n});\n\nfunction Articlelist({ posts, error }) {\n  return (\n    <div className=\"stories\">\n      {posts.length > 0 && <ArticleHeader columns={COLUMNS} />}\n      {error && <p className=\"error\">Something went wrong...</p>}\n      {(posts || []).map(article => (\n        <Articlepost key={article.objectID} post={article} columns={COLUMNS} />\n      ))}\n    </div>\n  );\n}\n\nexport default connect(mapStateToProps)(Articlelist);\n\nArticleHeader.propTypes = {\n  columns: PropTypes.objectOf(PropTypes.object).isRequired,\n};\n\nArticlelist.defaultProps = {\n  error: null,\n};\n\nArticlelist.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.object).isRequired,\n  error: PropTypes.string,\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Button } from './Button';\nimport { fetchingPost } from '../reduxs/actions/actionsAddingPost';\n\nclass Searchbar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      query: '',\n    };\n  }\n\n  onSubmit = e => {\n    const { query } = this.state;\n    const { onFetchAPI } = this.props;\n    if (query) {\n      onFetchAPI(query);\n      this.setState({ query: '' });\n    }\n    e.preventDefault();\n  };\n\n  onChange = e => {\n    const { value } = e.target;\n    this.setState({\n      query: value,\n    });\n  };\n\n  render() {\n    const { onSubmit, onChange } = this;\n    const { query } = this.state;\n    return (\n      <div>\n        <form onSubmit={onSubmit}>\n          <input type=\"text\" value={query} onChange={onChange} />\n          <Button type=\"submit\" inline=\"Search\" />\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  onFetchAPI: query => dispatch(fetchingPost(query)),\n});\n\nSearchbar.propTypes = {\n  onFetchAPI: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Searchbar);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './reduxs/store/store';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n","import React from 'react';\nimport Articlelist from './Articlelist';\nimport Searcbar from './Searcbar';\nimport './App.css';\n\nexport default function App() {\n  return (\n    <div>\n      <Searcbar />\n      <Articlelist />\n    </div>\n  );\n}\n"],"sourceRoot":""}